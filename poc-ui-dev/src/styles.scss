// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "@angular/material" as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$watch-connection-app-primary: mat.define-palette(mat.$indigo-palette);
$watch-connection-app-accent: mat.define-palette(
  mat.$pink-palette,
  A200,
  A100,
  A400
);

// The warn palette is optional (defaults to red).
$watch-connection-app-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$watch-connection-app-theme: mat.define-light-theme(
  (
    color: (
      primary: $watch-connection-app-primary,
      accent: $watch-connection-app-accent,
      warn: $watch-connection-app-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($watch-connection-app-theme);

/* You can add global styles to this file, and also import other style files */
/***
    The new CSS reset - version 1.7.2 (last updated 23.6.2022)
    GitHub page: https://github.com/elad2412/the-new-css-reset
***/

/*
    Remove all the styles of the "User-Agent-Stylesheet", except for the 'display' property
    - The "symbol *" part is to solve Firefox SVG sprite bug
 */

///////////////////////////////////////////////
// uncomment in case of issues with the font //
///////////////////////////////////////////////
@font-face {
  font-family: "Roboto";
  src: url("assets/fonts/Roboto-Regular.ttf") format("truetype");
  font-weight: 400;
  font-style: sans-serif;
  font-family: "Roboto-light";
  src: url("assets/fonts/Roboto-Light.ttf") format("truetype");
  font-weight: 200;
  font-style: sans-serif;
  font-family: "Roboto-bold";
  src: url("assets/fonts/Roboto-Bold.ttf") format("truetype");
  font-weight: 700;
  font-style: sans-serif;
}

*:where(:not(html, iframe, canvas, img, svg, video):not(svg *, symbol *)) {
  all: unset;
  display: revert;
}

:root {
  // colors
  // dark theme
  --main-color: #3d3c42;
  --secondary-color: #8a8894;
  --secondary-complementry-color: #e4e1dc;
  --accent-color: #58425a;
  --rare-color: #a6d1e6;
  --good-color: #6fa16f;

  // light theme
  // --main-color: #fefbf6;
  // --secondary-complementry-color: #686672;
  // --secondary-color: #3d3c42;
  // --rare-color: #a6d1e6;
  // --accent-color: #755977;

  // font
  --main-font-family: Roboto, sans-serif;
  --main-light-font-family: Roboto-light, sans-serif;
  --main-bold-font-family: Roboto-bold, sans-serif;
  --main-font-color: black;
  --secondary-font-color: rgb(10, 57, 88);
  --pay-attention-font-color: rgb(187, 115, 20);

  .h2-title {
    font-size: 24px;
  }
  .clickable {
    cursor: pointer;
  }
  .default-mouse {
    cursor: default;
  }

  background-color: var(--secondary-color);
}

html,
body {
  width: 100%;
  height: 100%;
  margin: 0;
  // font-family: var(--mainFontFamily);
}

/* Preferred box-sizing value */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Reapply the pointer cursor for anchor tags */
a,
button {
  cursor: revert;
}

/* Remove list styles (bullets/numbers) */
ol,
ul,
menu {
  list-style: none;
}

/* For images to not be able to exceed their container */
img {
  max-width: 100%;
}

/* removes spacing between cells in tables */
table {
  border-collapse: collapse;
}

/* Safari - solving issue when using user-select:none on the <body> text input doesn't working */
input,
textarea {
  -webkit-user-select: auto;
}

/* revert the 'white-space' property for textarea elements on Safari */
textarea {
  white-space: revert;
}

/* minimum style to allow to style meter element */
meter {
  -webkit-appearance: revert;
  appearance: revert;
}

/* reset default text opacity of input placeholder */
::placeholder {
  color: unset;
}

/* fix the feature of 'hidden' attribute.
   display:revert; revert to element instead of attribute */
:where([hidden]) {
  display: none;
}

/* revert for bug in Chromium browsers
   - fix for the content editable attribute will work properly.
   - webkit-user-select: auto; added for Safari in case of using user-select:none on wrapper element*/
:where([contenteditable]:not([contenteditable="false"])) {
  -moz-user-modify: read-write;
  -webkit-user-modify: read-write;
  overflow-wrap: break-word;
  -webkit-line-break: after-white-space;
  -webkit-user-select: auto;
}

/* apply back the draggable feature - exist only in Chromium and Safari */
:where([draggable="true"]) {
  -webkit-user-drag: element;
}

html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, "Helvetica Neue", sans-serif;
}
